InfoFiles: Annotation System for treex

InfoFiles provide a way to document and annotate files and directories directly
within the file system, co-locating metadata with the items they describe.

1. Syntax

   The default InfoFile name is ".info". The format is line-based, with one
   annotation per line:

       <path> <annotation>

   - Path: The file or directory to annotate, relative to the .info file.
   - Annotation: A string of text describing the item.

   Design Principles:

   - Permissive Parsing: Designed for manual editing.
   - Space Handling: Paths with spaces must be escaped. The first unescaped
     space separates the path from the annotation.
   - Comments: Lines starting with '#' are ignored.
   - Whitespace: Leading/trailing whitespace is trimmed. Blank lines are ignored.
   - Malformed Lines: Lines with only a path and no annotation are ignored.
     Annotations cannot span multiple lines.
   - Local Directory: A period '.' represents the directory containing the .info file.

2. Semantics

   The InfoFile system is informational and does not halt execution on errors.
   Instead, it emits warnings for conditions like:

   - Path does not exist.
   - Path is outside the .info file's directory (e.g., points to a parent).
   - Path is duplicated within the same file (first occurrence wins).

   Merging and Precedence:

   - InfoFiles can annotate any file or directory at or below their own level.
   - When collecting annotations, all .info files in a tree are merged.
   - If multiple annotations exist for the same path, the one from the .info
     file closest to the target path wins.
   - If distances are equal, the directory path that comes first lexicographically
     has precedence.

     Example:

         home/
         ├── .info         (contains annotation for kids/mike.txt)
         └── kids/
             ├── .info     (also contains annotation for mike.txt)
             └── mike.txt

     In this case, the annotation from `home/kids/.info` wins for `mike.txt`.

3. Location

   An .info file can be placed in any directory. While it's often best to keep
   annotations close to the items they describe, a single project-level .info
   file can also be used. The system recursively merges all found entries.

4. Tooling

   The `treex info` command provides tools for managing InfoFiles.

   - `treex info validate`
     Detects all issues that the linter would, and also identifies when
     multiple .info files refer to the same path.

   - `treex info clean`
     Removes lines with invalid path-annotation pairs, such as malformed
     lines or entries for non-existent paths.

   - `treex info distribute`
     Moves annotations from the current directory's .info file to the optimal
     .info file closer to the annotated path.

   - `treex info gather`
     Merges all annotations from descendant .info files into the .info file
     in the current working directory.

   - `treex info add <path> <annotation>`
     Adds a new annotation. The target .info file is determined by the path.
     Does not add an annotation if one already exists for the given path.

   - `treex info remove <path>`
     Removes an existing annotation for a given path.

   - `treex info edit <path> <new-annotation>`
     Updates the annotation for an existing path.