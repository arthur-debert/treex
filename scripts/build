#!/usr/bin/env bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configurable packages - modify this variable when extracting info package
PACKAGES="${PACKAGES:-treex info}"

# Build output directory
BIN_DIR="${PROJECT_ROOT}/dist/bin"

echo -e "${BLUE}${BOLD}Building packages: ${PACKAGES}...${NC}"
echo

# Clean and create build directories
echo -e "${BLUE}Setting up build directories...${NC}"
mkdir -p "${BIN_DIR}"
echo -e "${GREEN}✓ Build directories ready${NC}"
echo

# Get version information from git
VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
BUILD_DATE=$(date -u '+%Y-%m-%d_%H:%M:%S')

# Show build information
echo -e "${BLUE}Build Information:${NC}"
echo -e "  Version: ${BOLD}$VERSION${NC}"
echo -e "  Commit:  ${BOLD}$COMMIT${NC}"
echo -e "  Date:    ${BOLD}$BUILD_DATE${NC}"
echo

# Build binaries for each package
BUILD_SUCCESS=true
for PACKAGE in $PACKAGES; do
    if [[ "$PACKAGE" == "treex" ]]; then
        echo -e "${BLUE}Building treex CLI...${NC}"
        LDFLAGS="-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildDate=${BUILD_DATE}"
        if go build -ldflags "${LDFLAGS}" -o "${BIN_DIR}/treex" ./cmd; then
            echo -e "${GREEN}✓ treex CLI built successfully${NC}"
            chmod +x "${BIN_DIR}/treex"
        else
            echo -e "${RED}∅ treex CLI build failed${NC}"
            BUILD_SUCCESS=false
        fi
    elif [[ "$PACKAGE" == "info" ]]; then
        echo -e "${BLUE}Building info package...${NC}"
        # Info package doesn't have a main binary to build, so we just validate it compiles
        if go build ./info/...; then
            echo -e "${GREEN}✓ info package compiled successfully${NC}"
        else
            echo -e "${RED}∅ info package compilation failed${NC}"
            BUILD_SUCCESS=false
        fi
    else
        echo -e "${YELLOW}⚠ Unknown package: $PACKAGE${NC}"
    fi
done

if [[ "$BUILD_SUCCESS" != "true" ]]; then
    exit 1
fi

# Run tests if not skipped
if [[ "${SKIP_TESTS:-}" != "true" ]]; then
    echo
    echo -e "${YELLOW}Running tests...${NC}"
    
    # Build test command for configured packages
    TEST_PATTERNS=""
    for PACKAGE in $PACKAGES; do
        if [[ "$PACKAGE" == "treex" ]]; then
            TEST_PATTERNS="$TEST_PATTERNS ./treex/..."
        elif [[ "$PACKAGE" == "info" ]]; then
            TEST_PATTERNS="$TEST_PATTERNS ./info/..."
        fi
    done
    
    # Add cmd and root level if treex is included
    if [[ "$PACKAGES" == *"treex"* ]]; then
        TEST_PATTERNS="$TEST_PATTERNS ./cmd/..."
    fi
    
    TEST_CMD="go test $TEST_PATTERNS -short"
    if [ -f "vendor/modules.txt" ]; then
        TEST_CMD="go test -mod=vendor $TEST_PATTERNS -short"
    fi
    if $TEST_CMD; then
        echo -e "${GREEN}✓ All tests passed${NC}"
    else
        echo -e "${RED}∅ Tests failed${NC}"
        exit 1
    fi
else
    echo
    echo -e "${YELLOW}[!] Tests skipped (SKIP_TESTS=true)${NC}"
fi

echo
echo -e "${GREEN}${BOLD}Build completed successfully!${NC}"
echo -e "${BLUE}Build artifacts in: ${BOLD}${BIN_DIR}/${NC}"
ls -la "${BIN_DIR}/"